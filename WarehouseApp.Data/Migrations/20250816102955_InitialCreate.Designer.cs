// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseApp.Data.Context;

#nullable disable

namespace WarehouseApp.Data.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20250816102955_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("WarehouseApp.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#007ACC");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Categories_Name");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("IX_Categories_ParentCategoryId");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_Categories_SortOrder");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#007ACC",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(7932),
                            Description = "Electronic products",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Electronics",
                            SortOrder = 0,
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8218)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#FF6B6B",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8482),
                            Description = "Clothing and apparel",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Clothing",
                            SortOrder = 0,
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8483)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#4ECDC4",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8486),
                            Description = "Books and publications",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Books",
                            SortOrder = 0,
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8486)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#45B7D1",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8488),
                            Description = "Home and garden products",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home & Garden",
                            SortOrder = 0,
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 726, DateTimeKind.Utc).AddTicks(8489)
                        });
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aisle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CapacityUnit")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("m³");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<decimal?>("CurrentCapacity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MaxCapacity")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("MaxTemperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("MinTemperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Locations_Code");

                    b.HasIndex("QRCode")
                        .HasDatabaseName("IX_Locations_QRCode");

                    b.HasIndex("Zone")
                        .HasDatabaseName("IX_Locations_Zone");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aisle = "1",
                            CapacityUnit = "m³",
                            Code = "A1-01-A-01",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9304),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zone A - Aisle 1 - Shelf A - Position 1",
                            Position = "1",
                            Shelf = "A",
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9304),
                            Zone = "A"
                        },
                        new
                        {
                            Id = 2,
                            Aisle = "1",
                            CapacityUnit = "m³",
                            Code = "A1-01-A-02",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9314),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zone A - Aisle 1 - Shelf A - Position 2",
                            Position = "2",
                            Shelf = "A",
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9315),
                            Zone = "A"
                        },
                        new
                        {
                            Id = 3,
                            Aisle = "1",
                            CapacityUnit = "m³",
                            Code = "B1-01-A-01",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9318),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zone B - Aisle 1 - Shelf A - Position 1",
                            Position = "1",
                            Shelf = "A",
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9318),
                            Zone = "B"
                        },
                        new
                        {
                            Id = 4,
                            Aisle = "1",
                            CapacityUnit = "m³",
                            Code = "B1-01-A-02",
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9321),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Zone B - Aisle 1 - Shelf A - Position 2",
                            Position = "2",
                            Shelf = "A",
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 727, DateTimeKind.Utc).AddTicks(9322),
                            Zone = "B"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasExpiry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("pcs");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .HasDatabaseName("IX_Products_Barcode");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Products_CategoryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_SKU");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("IX_Products_SupplierId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.ProductLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimaryLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaximumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("IX_ProductLocations_LocationId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductLocations_ProductId");

                    b.HasIndex("ProductId", "LocationId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductLocations_ProductId_LocationId");

                    b.ToTable("ProductLocations", (string)null);
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MovementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("MovementType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NewStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreviousStock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_StockMovements_CreatedBy");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("IX_StockMovements_LocationId");

                    b.HasIndex("MovementDate")
                        .HasDatabaseName("IX_StockMovements_MovementDate");

                    b.HasIndex("MovementType")
                        .HasDatabaseName("IX_StockMovements_MovementType");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_StockMovements_ProductId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("StockMovements", (string)null);
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Suppliers_Email");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Suppliers_Name");

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(2);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 728, DateTimeKind.Utc).AddTicks(2287),
                            Email = "admin@warehouse.com",
                            FirstName = "System",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Administrator",
                            PasswordHash = "$2a$11$rQiU9k7Z8k7Z8k7Z8k7Z8O",
                            Role = 4,
                            UpdatedAt = new DateTime(2025, 8, 16, 10, 29, 53, 728, DateTimeKind.Utc).AddTicks(2288),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Category", b =>
                {
                    b.HasOne("WarehouseApp.Core.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Product", b =>
                {
                    b.HasOne("WarehouseApp.Core.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Core.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.ProductLocation", b =>
                {
                    b.HasOne("WarehouseApp.Core.Models.Location", "Location")
                        .WithMany("ProductLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Core.Models.Product", "Product")
                        .WithMany("ProductLocations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.StockMovement", b =>
                {
                    b.HasOne("WarehouseApp.Core.Models.User", null)
                        .WithMany("StockMovements")
                        .HasForeignKey("CreatedBy")
                        .HasPrincipalKey("Username")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Core.Models.Location", "Location")
                        .WithMany("StockMovements")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Core.Models.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Core.Models.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Location", b =>
                {
                    b.Navigation("ProductLocations");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Product", b =>
                {
                    b.Navigation("ProductLocations");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarehouseApp.Core.Models.User", b =>
                {
                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
